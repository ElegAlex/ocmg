<?php

namespace App\Repository;


use App\Entity\Data;
use App\Tools\JsonHandler;
use CNAMTS\PHPK\CoreBundle\Data\Repository;
use Doctrine\ORM\EntityRepository;
use Symfony\Component\HttpFoundation\Session\Session;

/**
 * DataRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DataRepository extends EntityRepository implements Repository
{

    /**
     * Méthode liste return les datas du tableau listeciblageupload
     *
     * @return array|int
     * @throws \Doctrine\DBAL\DBALException
     */
    public function liste()
    {
        $session = new Session();

        $em = $this->getEntityManager();
        $theme =
            $em->getRepository(Theme::class)
                ->findOneBy([

                    'libelleTheme' => $session->get('filenameUpload')


                ]);

        $session->set('themeId', []);
        $themeId = $theme->getId();

        $session->set('themeId', $themeId);

        $datasJson =
            $em->getRepository(Data::class)
                ->findAllById(
                    $session->get('themeId')
                );

        foreach ($datasJson as $data) {

            $dataCiblage[] = JsonHandler::mergeData($theme->getColonneTheme(), $data->getDatas());

        }

        return $dataCiblage;
    }


    /**
     * méthode permet de récupérer toutes les datas en fonction de id du theme
     *
     * @param $id
     * @return mixed
     */
    public function findAllById($id)
    {

        $sql = $this->getEntityManager()
            ->createQuery(
                'SELECT d FROM App\\Entity\\Data d JOIN d.theme t WHERE t.id = :id')
            ->setParameter('id', $id);

        return $sql->getResult();
    }


    /**
     *
     * résultat requete globale
     *
     * @param int $theme
     * @param int $age
     * @param int $periode
     * @return array
     * @throws \Doctrine\DBAL\DBALException
     */
    private function findDataByQuery($theme, $age, $periode, $idDep, $idUtaa)
    {


        $connexion = $this->getEntityManager()->getConnection();

        //gestion du paramètre $age en fonction du theme

        //paramétrage pour all age
        $joinage = '';
        $insertAge = '';
        $selectAge = '';
        $insertUtaa = '';
        $insertDep = '';
        $joinDep = 'join
                         departement d2 on u.departement_id = d2.id';

        //paramétrage pour une tranche d age donc un ageID
        if ($age !== '') {

            $insertAge = ' and d.age_id ="' . $age . '"';
        }

        if ($idUtaa != null) {

            $insertUtaa = ' and p.utaa_id= ' . $idUtaa;

        }
        if ($idDep != null) {
            $insertDep = ' and u.departement_id = ' . $idDep;

            $joinDep = 'join
                         departement d2 on u.departement_id = d2.id';
        }
        //requete qui sélectionne les datas en fonction du theme, age et de la période, join tables praticien, ville, utaa, département
        //enleve le JSON_EXTRACT sur le serveur de test et de prod car mariadb
        $sql = 'select
                    t.commentaire_colonne,
                    t.colonne_theme  ,                                 
                    d.datas as datas,
                    p.code_praticien,
                    p.nom_prat,
                    p.prenom_prat,                    
                    p2.code,
                    u.code_utaa,
                    d2.code_dep,
                    v.libelle_ville
                    ' . $selectAge . '
   
                from
                     data d
                join
                         praticien p on d.praticien_id = p.id
                
                join
                         ville v on p.ville_id = v.id                
                join
                         utaa u on p.utaa_id = u.id
                ' . $joinDep . '
                join
                         periode p2 on d.periode_id = p2.id
                
                join
                         theme t on d.theme_id = t.id ' . $joinage . '          
                
                where
                
                    d.theme_id = "' . $theme . '
                    "  and d.periode_id= ' . $periode .
            $insertAge . $insertUtaa . $insertDep;


        $statement = $connexion->query($sql);


        return $statement->fetchAll();
    }

    /**
     * Méthode faisant appel à la méthode privée findDataByQuery($theme , $age , $periode, $idUtaa)
     * retourne les datasAssociées qui constituent le résultat de la requete globale
     *
     * @param $theme
     * @param $age
     * @param $periode
     * @param $idUtaa
     * @return mixed
     * @throws \Doctrine\DBAL\DBALException
     */
    public function selectDatasRequeteGlobale($theme, $age, $periode, $libelles = [0], $idDep, $idUtaa)
    {

        $allDatas = $this->findDataByQuery($theme, $age, $periode, $idDep, $idUtaa);

        //récupérer les datas du themeID
        $em = $this->getEntityManager();
        $themes =
            $em->getRepository(Theme::class)
                ->findOneBy([

                    'id' => $theme

                ]);
        $allLibelles = $themes->getCommentaireColonne();

        /*tableau des commentaires communs */
        $libellesFixes = array_merge([0 => array_keys($allDatas[0])[4]],
            [0 => array_keys($allDatas[0])[5]],
            [0 => array_keys($allDatas[0])[3]],
            [0 => array_keys($allDatas[0])[7]],
            [0 => array_keys($allDatas[0])[9]],
            [$allLibelles[0]]);

        //contient tous les libelles selectionés dans l'application avec les commentaires fixes
        $listIndicSelect = array_merge($libellesFixes, $libelles);

        //contient tous les libelles du thème avec les commentaires fixes
        $allLibellesAssoc = array_merge(array_slice($libellesFixes, 0, count($libellesFixes) - 1), $allLibelles);

        foreach ($allDatas as $allData) {

            $nomPraticien[] = [];

            //recuperer dans $allData les données des commentaires
            $dataFixes = [];

            //recupere le nom du praticien
            $dataFixes[] = $allData['nom_prat'];

            //recupere le prenom du praticien
            $dataFixes[] = $allData['prenom_prat'];

            //recupere le numéro du praticien
            $dataFixes[] = $allData['code_praticien'];

            //recupere l'utaa
            $dataFixes[] = $allData['code_utaa'];

            //recupere la ville
            $dataFixes[] = $allData['libelle_ville'];


            $jsonDatas = explode('["', json_decode($allData['datas']));
            $datas = explode('"]', $jsonDatas[1]);

            $allDatas = explode('","', $datas[0]);

            $allDataReqGlobale = array_merge($dataFixes,
                $allDatas);

            $allDataAssocLibelles = JsonHandler::mergeData($allLibellesAssoc, $allDataReqGlobale);


            //si tous les libelles sont demandés
            if ($libelles === ['allComments' => 'allComments']) {

                if (array_key_exists('Classe d\'age', $allDataAssocLibelles)) {

                    $dataAssocReqglobale[] = array_diff_key(

                        array_slice($allDataAssocLibelles, 0, count($allDataAssocLibelles) - 3), ['Classe d\'age' => 3]

                    );

                } else {

                    $dataAssocReqglobale[] = array_slice($allDataAssocLibelles, 0, count($allDataAssocLibelles) - 2);

                }

            } else {

                $dataAssocReqglobale[] =

                    array_intersect_key($allDataAssocLibelles,
                        array_flip($listIndicSelect)

                    );
            }

        }

        return $dataAssocReqglobale;

    }


    /**
     * @param $themeId
     * @return array
     * @throws \Doctrine\DBAL\DBALException
     */
    public function SelectAgeIdFromData($themeId)
    {

        $connexion = $this->getEntityManager()->getConnection();
        $sql = 'SELECT distinct d.age_id from data d where d.theme_id=' . $themeId;

        $statement = $connexion->query($sql);

        return $statement->fetchAll();
    }

}
