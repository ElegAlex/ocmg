<?php

namespace App\Repository;


use App\Entity\Data;
use App\Entity\Theme;
use App\Tools\JsonHandler;
use CNAMTS\PHPK\CoreBundle\Data\Repository;
use Doctrine\ORM\EntityRepository;
use Symfony\Component\HttpFoundation\Session\Session;

/**
 * DataRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DataRepository extends EntityRepository implements Repository
{

    /**
     * Méthode liste return les datas du tableau listeciblageupload
     *
     * @return array|int
     * @throws \Doctrine\DBAL\DBALException
     */
    public function liste()
    {
        $session = new Session();

        $em = $this->getEntityManager();
        $theme =
            $em->getRepository(Theme::class)
                ->findOneBy([

                    'libelleTheme' => $session->get('filenameUpload')


                ]);

        $session->set('themeId', []);
        $themeId = $theme->getId();

        $session->set('themeId', $themeId);

        $datasJson =
            $em->getRepository(Data::class)
                ->findAllById(
                    $session->get('themeId')
                );

        foreach ($datasJson as $data) {

            $dataCiblage[] = JsonHandler::mergeData($theme->getColonneTheme(), $data->getDatas());

        }

        return $dataCiblage;
    }


    /**
     * méthode permet de récupérer toutes les datas en fonction de id du theme
     *
     * @param $id
     * @return mixed
     */
    public function findAllById($id)
    {

        $sql = $this->getEntityManager()
            ->createQuery(
                'SELECT d FROM App\\Entity\\Data d JOIN d.theme t WHERE t.id = :id')
            ->setParameter('id', $id);

        return $sql->getResult();
    }


    /**
     *
     * résultat requete globale
     *
     * @param int $theme
     * @param int $age
     * @param int $periode
     * @return array
     * @throws \Doctrine\DBAL\DBALException
     */
    private function findDataByQuery($theme, $age, $periode, $idDep, $idUtaa)
    {
        $qb = $this->createQueryBuilder('d')
            ->select(
                't.commentaireColonne AS commentaire_colonne',
                't.colonneTheme AS colonne_theme',
                'd.datas AS datas',
                'p.codePraticien AS code_praticien',
                'p.nomPrat AS nom_prat',
                'p.prenomPrat AS prenom_prat',
                'pe.code AS code',
                'u.codeUtaa AS code_utaa',
                'dep.codeDep AS code_dep',
                'v.libelleVille AS libelle_ville'
            )
            ->join('d.praticien', 'p')
            ->join('p.ville', 'v')
            ->join('p.utaa', 'u')
            ->join('u.departement', 'dep')
            ->join('d.periode', 'pe')
            ->join('d.theme', 't')
            ->where('d.theme = :theme')
            ->andWhere('d.periode = :periode')
            ->setParameter('theme', $theme)
            ->setParameter('periode', $periode);

        if ($age !== '') {
            $qb->andWhere('d.age = :age')
               ->setParameter('age', $age);
        }

        if (null !== $idUtaa) {
            $qb->andWhere('p.utaa = :utaa')
               ->setParameter('utaa', $idUtaa);
        }

        if (null !== $idDep) {
            $qb->andWhere('u.departement = :departement')
               ->setParameter('departement', $idDep);
        }

        return $qb->getQuery()->getArrayResult();
    }

    /**
     * Méthode faisant appel à la méthode privée findDataByQuery($theme , $age , $periode, $idUtaa)
     * retourne les datasAssociées qui constituent le résultat de la requete globale
     *
     * @param $theme
     * @param $age
     * @param $periode
     * @param $idUtaa
     * @return mixed
     * @throws \Doctrine\DBAL\DBALException
     */
    public function selectDatasRequeteGlobale($theme, $age, $periode, $libelles = [0], $idDep, $idUtaa)
    {
        $allDatas = $this->findDataByQuery($theme, $age, $periode, $idDep, $idUtaa);

        //récupérer les datas du themeID
        $em = $this->getEntityManager();
        $themes = $em->getRepository(Theme::class)->findOneBy(['id' => $theme]);
        $allLibelles = $themes->getCommentaireColonne();

        /* tableau des commentaires communs */
        $libellesFixes = array_merge(
            [0 => array_keys($allDatas[0])[4]],
            [0 => array_keys($allDatas[0])[5]],
            [0 => array_keys($allDatas[0])[3]],
            [0 => array_keys($allDatas[0])[7]],
            [0 => array_keys($allDatas[0])[9]],
            [$allLibelles[0]]
        );

        // contient tous les libelles selectionés dans l'application avec les commentaires fixes
        $listIndicSelect = array_merge($libellesFixes, $libelles);

        // contient tous les libelles du thème avec les commentaires fixes
        $allLibellesAssoc = array_merge(array_slice($libellesFixes, 0, count($libellesFixes) - 1), $allLibelles);

        foreach ($allDatas as $allData) {
            $dataFixes = [
                $allData['nom_prat'],
                $allData['prenom_prat'],
                $allData['code_praticien'],
                $allData['code_utaa'],
                $allData['libelle_ville'],
            ];

            $dataValues = is_array($allData['datas']) ? $allData['datas'] : json_decode($allData['datas'], true);
            $allDataReqGlobale = array_merge($dataFixes, $dataValues);

            $allDataAssocLibelles = JsonHandler::mergeData($allLibellesAssoc, $allDataReqGlobale);

            //si tous les libelles sont demandés
            if ($libelles === ['allComments' => 'allComments']) {
                if (array_key_exists("Classe d'age", $allDataAssocLibelles)) {
                    $dataAssocReqglobale[] = array_diff_key(
                        array_slice($allDataAssocLibelles, 0, count($allDataAssocLibelles) - 3),
                        ["Classe d'age" => 3]
                    );
                } else {
                    $dataAssocReqglobale[] = array_slice($allDataAssocLibelles, 0, count($allDataAssocLibelles) - 2);
                }
            } else {
                $dataAssocReqglobale[] = array_intersect_key(
                    $allDataAssocLibelles,
                    array_flip($listIndicSelect)
                );
            }
        }

        return $dataAssocReqglobale;
    }



    /**
     * @param $themeId
     * @return array
     * @throws \Doctrine\DBAL\DBALException
     */
    public function SelectAgeIdFromData($themeId)
    {

        $connexion = $this->getEntityManager()->getConnection();
        $sql = 'SELECT distinct d.age_id from data d where d.theme_id = :themeId';

        $statement = $connexion->prepare($sql);
        $statement->bindValue('themeId', (int) $themeId, \PDO::PARAM_INT);
        $statement->execute();

        return $statement->fetchAll();
    }

}
